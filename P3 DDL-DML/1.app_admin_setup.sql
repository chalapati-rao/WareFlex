PURGE RECYCLEBIN;

SET SERVEROUTPUT ON;

-- CREATE AND GRANT PERMISSIONS TO WAREHOUSE_APP_ADMIN ROLE
-- Drop the role if already exists
BEGIN
    EXECUTE IMMEDIATE 'DROP ROLE WAREHOUSE_APP_ADMIN';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -1919 THEN
          dbms_output.put_line('ROLE WAREHOUSE_APP_ADMIN does not exist. Proceeding to create the role');
        END IF;
END;
/

CREATE ROLE WAREHOUSE_APP_ADMIN;
GRANT CONNECT TO WAREHOUSE_APP_ADMIN;
GRANT CREATE SESSION, CREATE VIEW, CREATE TABLE, ALTER SESSION, CREATE SEQUENCE TO WAREHOUSE_APP_ADMIN;
GRANT CREATE SYNONYM, CREATE DATABASE LINK, RESOURCE TO WAREHOUSE_APP_ADMIN;
GRANT CREATE ROLE, CREATE USER TO WAREHOUSE_APP_ADMIN;
GRANT DROP ANY ROLE, DROP USER TO WAREHOUSE_APP_ADMIN;
GRANT DROP ANY TABLE, DROP ANY SEQUENCE TO WAREHOUSE_APP_ADMIN;
GRANT CREATE JOB TO WAREHOUSE_APP_ADMIN;

-- CREATE WAREHOUSE_APP_ADMIN_USER  ASSIGN WAREHOUSE_APP_ADMIN ROLE
-- Drop the user if already exists
BEGIN
    EXECUTE IMMEDIATE 'DROP USER WAREHOUSE_APP_ADMIN_USER CASCADE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -1918 THEN
           dbms_output.put_line('User WAREHOUSE_APP_ADMIN_USER doesnot exist. Proceeding to create the user');
        END IF;
END;
/

DECLARE
    user_exists NUMBER;
BEGIN
    -- Check if the user exists
    SELECT COUNT(*) INTO user_exists FROM DBA_USERS WHERE username = 'WAREHOUSE_APP_ADMIN_USER';

    -- Drop the user if it exists
    IF user_exists > 0 THEN
        EXECUTE IMMEDIATE 'DROP USER WAREHOUSE_APP_ADMIN_USER CASCADE';
        DBMS_OUTPUT.PUT_LINE('User WAREHOUSE_APP_ADMIN_USER dropped.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('User WAREHOUSE_APP_ADMIN_USER does not exist. Proceeding to create.');
    END IF;

    -- Create the user
    EXECUTE IMMEDIATE 'CREATE USER WAREHOUSE_APP_ADMIN_USER IDENTIFIED BY "BostonSpring2024#"';
    DBMS_OUTPUT.PUT_LINE('User WAREHOUSE_APP_ADMIN_USER created.');

    -- Assign the role
    EXECUTE IMMEDIATE 'GRANT WAREHOUSE_APP_ADMIN TO WAREHOUSE_APP_ADMIN_USER';
    EXECUTE IMMEDIATE 'ALTER USER WAREHOUSE_APP_ADMIN_USER DEFAULT TABLESPACE users QUOTA UNLIMITED ON users';
    EXECUTE IMMEDIATE 'ALTER USER WAREHOUSE_APP_ADMIN_USER TEMPORARY TABLESPACE TEMP';
    
    EXECUTE IMMEDIATE 'GRANT CREATE SESSION, CREATE USER, DROP USER, ALTER USER, CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE TRIGGER, CREATE SEQUENCE, CREATE SYNONYM TO WAREHOUSE_APP_ADMIN_USER WITH ADMIN OPTION';

    --EXECUTE IMMEDIATE 'GRANT DROP ANY TABLE, DROP ANY SEQUENCE, DROP ANY VIEW TO WAREHOUSE_APP_ADMIN_USER';

    
    EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO WAREHOUSE_APP_ADMIN_USER WITH ADMIN OPTION';
   
    --EXECUTE IMMEDIATE 'ALTER USER WAREHOUSE_APP_ADMIN_USER UNLIMITED ON users';

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/
--CREATE USER WAREHOUSE_APP_ADMIN_USER IDENTIFIED BY BostonSpring2024#;
-- GRANT WAREHOUSE_APP_ADMIN TO WAREHOUSE_APP_ADMIN_USER;
-- ALTER USER WAREHOUSE_APP_ADMIN_USER DEFAULT ROLE WAREHOUSE_APP_ADMIN;
-- ALTER USER WAREHOUSE_APP_ADMIN_USER DEFAULT TABLESPACE users QUOTA UNLIMITED ON users;
-- ALTER USER WAREHOUSE_APP_ADMIN_USER TEMPORARY TABLESPACE TEMP;


-- Grant the WAREHOUSE_APP_ADMIN_USER the ability to drop any table and sequence
-- GRANT DROP ANY TABLE, DROP ANY SEQUENCE TO WAREHOUSE_APP_ADMIN_USER;
-- GRANT CREATE ANY SEQUENCE TO WAREHOUSE_APP_ADMIN_USER;
-- GRANT DROP ANY SEQUENCE TO WAREHOUSE_APP_ADMIN_USER;
-- BEGIN
--     FOR t IN (SELECT table_name FROM all_tables WHERE owner = 'WAREHOUSE_APP_ADMIN_USER') LOOP
--         EXECUTE IMMEDIATE 'GRANT ALL PRIVILEGES ON WAREHOUSE_APP_ADMIN_USER.' || t.table_name || ' TO WAREHOUSE_APP_ADMIN_USER';
--     END LOOP;
-- END;
-- /